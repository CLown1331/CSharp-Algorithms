namespace CLown1331
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Text;
    using System.Threading;
    using Library.DisjointSet;

    /*
     *
     */

    static class Program 
    {
        private const int NumberOfTestCase = 2;
        private const int StackSize = 64 * (1 << 20);
        private const int Sz = (int)2e5 + 10;
        private const int Mod = (int)1e9 + 7;
        private static int n;

        private static void Solve()
        {
            n = NextInt();
            DisjointSet disjointSet = new DisjointSet(n);
            for (int i = 0; i < n; i++)
            {
                int x = NextInt() - 1;
                disjointSet.MergeSet(x, i);
            }

            int ans = 0;
            for (int i = 0; i < n; i++)
            {
                ans += (disjointSet[i] == i) ? 1 : 0;
            }

            OutputPrinter.WriteLine(ans);
        }

        public static void Main(string[] args)
        {
#if CLown1331
            for (int testCase = 0; testCase < NumberOfTestCase; testCase++)
            {
                Solve();
            }

            Utils.CreateFileForSubmission();
            if (Debugger.IsAttached) Thread.Sleep(Timeout.Infinite);
#else
            Thread t = new Thread(Solve, StackSize);
            t.Start();
            t.Join();
#endif
            OutputPrinter.Flush();
            ErrorPrinter.Flush();
        }

        private static int NextInt() => int.Parse(Reader.NextString());

        private static long NextLong() => long.Parse(Reader.NextString());

        private static double NextDouble() => double.Parse(Reader.NextString());

        private static string NextString() => Reader.NextString();

        private static string NextLine() => Reader.ReadLine();

        private static IEnumerable<T> OrderByRand<T>(this IEnumerable<T> x) => x.OrderBy(_ => XorShift);

        private static long Count<T>(this IEnumerable<T> x, Func<T, bool> pred) => Enumerable.Count(x, pred);

        private static IEnumerable<T> Repeat<T>(T v, long n) => Enumerable.Repeat<T>(v, (int)n);

        private static IEnumerable<int> Range(long s, long c) => Enumerable.Range((int)s, (int)c);

        private static uint XorShift
        {
            get
            {
                Xsc().MoveNext();
                return Xsc().Current;
            }
        }

        private static IEnumerator<uint> Xsc()
        {
            uint x = 123456789, y = 362436069, z = 521288629, w = (uint)(DateTime.Now.Ticks & 0xffffffff);
            while (true)
            {
                uint t = x ^ (x << 11);
                x = y;
                y = z;
                z = w;
                w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));
                yield return w;
            }
        }

        private static class Reader
        {
            private static readonly Queue<string> Param = new Queue<string>();
#if CLown1331
            private static readonly StreamReader InputReader = new StreamReader("input.txt");
#else
            private static readonly StreamReader InputReader = new StreamReader(Console.OpenStandardInput());
#endif

            public static string NextString()
            {
                if (Param.Count == 0)
                {
                    foreach (string item in ReadLine().Split(' '))
                    {
                        if (string.IsNullOrWhiteSpace(item))
                        {
                            continue;
                        }

                        Param.Enqueue(item);
                    }
                }

                return Param.Dequeue();
            }

            public static string ReadLine()
            {
                return InputReader.ReadLine();
            }
        }

        private static readonly Printer OutputPrinter = new Printer(Console.OpenStandardOutput());

        private static readonly Printer ErrorPrinter = new Printer(Console.OpenStandardError());

        private sealed class Printer : StreamWriter
        {
            public Printer(Stream stream)
                : base(stream, new UTF8Encoding(false, true))
            {
                this.AutoFlush = false;
            }

            public Printer(Stream stream, Encoding encoding)
                : base(stream, encoding)
            {
                this.AutoFlush = false;
            }

            public override IFormatProvider FormatProvider => CultureInfo.InvariantCulture;
        }
    }
}
namespace Library.DisjointSet
{
    public class DisjointSet
    {
        private int size;
        private int[] parent;

        public int NumberOfComponent { get; private set; }

        public int[] Count { get; }

        public int[] RealParent { get; }

        public int this[int u] => this.FindParent(u);

        public DisjointSet(int size)
        {
            this.size = size;
            this.NumberOfComponent = size;
            this.parent = new int[size];
            this.RealParent = new int[size];
            this.Count = new int[size];
            this.Reset();
        }

        public void Reset()
        {
            for (int i = 0; i < this.size; i++)
            {
                this.Count[i] = 1;
                this.parent[i] = i;
                this.RealParent[i] = i;
            }

            this.NumberOfComponent = this.size;
        }

        public int FindParent(int u)
        {
            if (this.parent[u] == u)
            {
                return u;
            }

            return this.parent[u] = this.FindParent(this.parent[u]);
        }

        public bool IsSameSet(int u, int v)
        {
            return this.FindParent(u) == this.FindParent(v);
        }

        public void MergeSet(int u, int v)
        {
            if (this.IsSameSet(u, v))
            {
                return;
            }

            u = this.FindParent(u);
            v = this.FindParent(v);
            if (this.Count[u] < this.Count[v])
            {
                (u, v) = (v, u);
            }

            this.parent[u] = this.parent[v];
            this.RealParent[u] = this.RealParent[v];
            this.Count[v] += this.Count[u];
            this.NumberOfComponent--;
        }
    }
}
